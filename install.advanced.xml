<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (SUSE Linux Enterprise Server for x86-64) 2015.1 (Build 429U)" ts="2017-02-24 19:10:39">
<Routine name="%ZLANGC00" type="MAC" languagemode="0" timestamp="64333,51194"><![CDATA[
QUIT

 //
 // "zforeach" command.
 //
 // Applies the certain function to each element of the collection.
 // 
 // Example:
 //   NAMESPACE> set collection = ##class(%ListOfDataTypes).%New()
 //   NAMESPACE> do collection.Insert("Hello ")
 //   NAMESPACE> do collection.Insert("World!")
 //   NAMESPACE>
 //   NAMESPACE> zforeach $zbind(collection, "io:print")
 //
 // See also:
 //   DeclarativeCOS.Binder
 //   DeclarativeCOS.Binder#ForEach
 //   DeclarativeCOS.IO
 //
ZFOREACH(binder) public {
  do binder.ForEach()
  Quit
}
]]></Routine>


<Routine name="%ZLANGF00" type="MAC" languagemode="0" timestamp="64333,52314"><![CDATA[
QUIT

 //
 // "$zbind" function.
 //
 // Returns new instance of DeclarativeCOS.Binder with specified collection and function.
 //
 // Example:
 //   NAMESPACE> set collection = ##class(%ListOfDataTypes).%New()
 //   NAMESPACE> do collection.Insert("Hello ")
 //   NAMESPACE> do collection.Insert("World!")
 //   NAMESPACE>
 //   NAMESPACE> zforeach $zbind(collection, "io:print")
 //   NAMESPACE> Hello World!
 //
 // See also:
 //   DeclarativeCOS.Binder
 //   DeclarativeCOS.Binder#%New
 //   DeclarativeCOS.Binder#ForEach
 //   DeclarativeCOS.IO
 //
ZBIND(collection, function) public {
  Quit ##class(DeclarativeCOS.Binder).%New(collection, function)
}

 //
 // "$zmap" function.
 //
 // Returns new collection where each item is result of apply the certain function to source item of the specified collection.
 //
 // Example:
 //   NAMESPACE> set numbers = ##class(%ListOfDataTypes).%New()
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE>
 //   NAMESPACE> write "[" _ $zjoin(numbers, ",") _ "]"
 //   NAMESPACE> [82,12,27]
 //   NAMESPACE>
 //   NAMESPACE> set hexNumbers = $zmap(numbers, "examples:toHex")
 //   NAMESPACE>
 //   NAMESPACE> for i=1:1:numbers.Count() { do numbers.SetAt($zhex(numbers.GetAt(i)), i) }
 //   NAMESPACE>
 //   NAMESPACE> write "[" _ $zjoin(numbers, ",") _ "]"
 //   NAMESPACE> [52,C,1B]
 //   NAMESPACE>
 //   NAMESPACE> write $zjoin(hexNumbers, ",")
 //   NAMESPACE> [52,C,1B]
 //
 // See also:
 //   DeclarativeCOS.Binder#Map
 //   DeclarativeCOS.Examples#toHex
 //   DeclarativeCOS.Joiner#join ($zjoin)
 //
ZMAP(collection, function) public {
  Quit $zbind(collection, function).Map()
}

 //
 // "$zfind" function.
 //
 // Returns the first found element from the specified collection by the certain criteria (function).
 // Otherwise, returns null string.
 //
 // Example:
 //   NAMESPACE> set numbers = ##class(%ListOfDataTypes).%New()
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE>
 //   NAMESPACE> set primeNumber = $zfind(numbers, "examples:isPrime")
 //   NAMESPACE>
 //   NAMESPACE> write "[" _ $zjoin(numbers, ",") _ "]"
 //   NAMESPACE> [69,41,68]
 //   NAMESPACE>
 //   NAMESPACE> write "Prime number: " _ $select(primeNumber="":"<not found>", 1:primeNumber)
 //   NAMESPACE> Prime number: 41
 //
 // See also:
 //   DeclarativeCOS.Binder#Find
 //   DeclarativeCOS.Examples#isPrime
 //   DeclarativeCOS.Joiner#join ($zjoin)
 //
ZFIND(collection, function) public {
  Quit $zbind(collection, function).Find()
}

 //
 // "$zfilter" function.
 //
 // Returns new collection which contains filtered elements by the certain criteria (function) of the specified collection.
 //
 // Example:
 //   NAMESPACE> set numbers = ##class(%ListOfDataTypes).%New()
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE>
 //   NAMESPACE> set filteredNumbers = $zfilter(numbers, "examples:isOdd")
 //   NAMESPACE>
 //   NAMESPACE> write "[" _ $zjoin(numbers, ",") _ "]"
 //   NAMESPACE> [22,71,31]
 //   NAMESPACE>
 //   NAMESPACE> write "[" _ $zjoin(filteredNumbers, ",") _ "]"
 //   NAMESPACE> [71,31]
 //
 // See also:
 //   DeclarativeCOS.Binder#Filter
 //   DeclarativeCOS.Examples#isOdd
 //   DeclarativeCOS.Joiner#join ($zjoin)
 //
ZFILTER(collection, function) public {
  Quit $zbind(collection, function).Filter()
}

 //
 // "$zexists" function.
 //
 // Returns $$$YES if collection contains element which is satisfied by by the certain criteria (function).
 // Otherwise, returns $$$NO.
 //
 // Example:
 //   NAMESPACE> set numbers = ##class(%ListOfDataTypes).%New()
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE> do numbers.Insert($random(100))
 //   NAMESPACE>
 //   NAMESPACE> set hasEvenNumbers = $zexists(numbers, "examples:isEven")
 //   NAMESPACE>
 //   NAMESPACE> write "[" _ $zjoin(numbers, ",") _ "]"
 //   NAMESPACE> [51,56,53]
 //   NAMESPACE>
 //   NAMESPACE> write "Collection has" _ $case(hasEvenNumbers, 1:" ", 0:" no ") _ "even numbers"
 //   NAMESPACE> Collection has even numbers
 //
 // See also:
 //   DeclarativeCOS.Binder#Exists
 //   DeclarativeCOS.Examples#isEven
 //   DeclarativeCOS.Joiner#join ($zjoin)
 //
ZEXISTS(collection, function) public {
  Quit $zbind(collection, function).Exists()
}

 //
 // "$zcount" function.
 //
 // Returns $$$YES if collection contains element which is satisfied by the certain criteria (function).
 // Otherwise, returns $$$NO.
 //
 // Example:
 //   NAMESPACE> set numbers = ##class(%ListOfDataTypes).%New()
 //   NAMESPACE> do numbers.Insert($random(1000))
 //   NAMESPACE> do numbers.Insert($random(1000))
 //   NAMESPACE> do numbers.Insert($random(1000))
 //   NAMESPACE>
 //   NAMESPACE> set palindromicNumbersCount = $zcount(numbers, "examples:isPalindromic")
 //   NAMESPACE>
 //   NAMESPACE> write "[" _ $zjoin(numbers, ",") _ "]"
 //   NAMESPACE> [715,202,898]
 //   NAMESPACE>
 //   NAMESPACE> write "Count of palindromic numbers: " _ palindromicNumbersCount
 //   NAMESPACE> Count of palindromic numbers: 2
 //
 // See also:
 //   DeclarativeCOS.Binder#Count
 //   DeclarativeCOS.Examples#isPalindromic
 //   DeclarativeCOS.Joiner#join ($zjoin)
 //
ZCOUNT(collection, function) public {
  Quit $zbind(collection, function).Count()
}

 //
 // "$zjoin" function.
 //
 // Returns string from elements of the specified collection usin the certain separator.
 //
 // Example:
 //   NAMESPACE> set words = ##class(%ListOfDataTypes).%New()
 //   NAMESPACE> do words.Insert("DeclarativeCOS")
 //   NAMESPACE> do words.Insert("is")
 //   NAMESPACE> do words.Insert("awesome!")
 //   NAMESPACE>
 //   NAMESPACE> write $jzoin(words, " ")
 //   NAMESPACE> DeclarativeCOS is awesome!
 //
 // See also:
 //   DeclarativeCOS.Joiner#join
 //
ZJOIN(collection, separator = "") public {
  Quit ##class(DeclarativeCOS.Joiner).join(collection, separator)
}
]]></Routine>
</Export>
